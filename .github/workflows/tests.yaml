name: Tests CI

on:
  push:
    branches:
      - main
    paths:
      - 'package/**'
      - 'tests/**'
      - '.github/workflows/tests.yaml'

jobs:
  test:
    if: "!startsWith(github.event.head_commit.message, 'bump:')"
    strategy:
      fail-fast: true
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    defaults:
      run:
        shell: bash
    env:
      POETRY_VERSION: 1.2.1
    runs-on: ${{ matrix.os }}
    steps:
      #----------------------------------------------
      # checkout repo
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      #----------------------------------------------
      # setup python
      #----------------------------------------------
      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      #----------------------------------------------
      # load poetry, if cached
      #----------------------------------------------
      - name: Load cached Poetry
        id: cached-poetry-installation
        uses: actions/cache@v3
        with:
          path: ~/.local
          key: poetry-cache-${{ runner.os }}-${{ env.POETRY_VERSION }}
      - name: Add cache to PATH
        if: runner.os == 'macOS' && steps.cached-poetry-installation.outputs.cache-hit == 'true'
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Add cache to PATH
        if: runner.os == 'Windows' && steps.cached-poetry-installation.outputs.cache-hit == 'true'
        run: |
          echo "${USERPROFILE}\.local\bin"
          echo "${USERPROFILE}\.local\bin" >> $GITHUB_PATH
      - name: Set PATH
        if: runner.os == 'Windows' && steps.cached-poetry-installation.outputs.cache-hit == 'true'
        run: set PATH
      #----------------------------------------------
      # install poetry, if not cached
      #----------------------------------------------
      - name: Install Poetry
        if: steps.cached-poetry-installation.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      #----------------------------------------------
      # load tests dependencies, if cached
      #
      # Notes:
      #  1. changes to the poetry.lock file will mean that
      #  this step is skipped and the next one will be executed instead
      #  2. caching venv does not seem to work on Windows runners
      #----------------------------------------------
      - name: Load cached PIP wheels
        if: runner.os == 'Windows'
        id: cached-pip-wheels
        uses: actions/cache@v3
        with:
          path: ~\AppData\Local\pip\Cache
          key: pip-${{ runner.os }}
      - name: Load cached .venv
        if: runner.os != 'Windows'
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: tests-venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install tests dependencies, if not cached
      #
      # Notes:
      #  poetry install --no-interaction --no-root --with=tests
      #  will install extra deps that we don't need and
      #  it might not work anyway because of the python version requirement
      #  specified in the pyproject.toml
      #----------------------------------------------
      - name: Install dependencies
        if: runner.os == 'Windows' || steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry install --no-interaction --no-root
          poetry add pytest
      #----------------------------------------------
      # install project (always)
      #----------------------------------------------
      - name: Install project
        run: poetry install --no-interaction
      #----------------------------------------------
      # run tests
      #----------------------------------------------
      - name: Run tests
        if: runner.os != 'Windows'
        run: |
          source .venv/bin/activate
          pytest tests/
      - name: Run tests
        if: runner.os == 'Windows'
        run: |
          source .venv/scripts/activate
  bump:
  #----------------------------------------------
  # Notes:
  #  in order to trigger the 'release' action when
  #  the tag is pushed, we must use a personal
  #  access token (PAT), instead of secrets.GITHUB_TOKEN
  #----------------------------------------------
    needs: test
    if: "!startsWith(github.event.head_commit.message, 'bump:')"
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      # checkout repo
      #----------------------------------------------
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT }}
          fetch-depth: 0
      #----------------------------------------------
      # bump version, push tag and update changelog
      #----------------------------------------------
      - name: Bump version
        uses: commitizen-tools/commitizen-action@master
        with:
          github_token: ${{ secrets.PAT }}
